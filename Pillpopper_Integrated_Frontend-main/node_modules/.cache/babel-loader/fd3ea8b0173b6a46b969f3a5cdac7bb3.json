{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\My PC\\\\Desktop\\\\Pillpopper_Integrated_Frontend-main\\\\src\\\\components\\\\Notification.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, memo } from \"react\";\nimport { ReactDialogBox } from \"react-js-dialog-box\";\nimport \"react-js-dialog-box/dist/index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Notification = () => {\n  _s();\n\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [medicineData, setMedicineData] = useState([]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      console.log(\"INTERVAL CALLING\");\n\n      async function fetchMedicineNotification() {\n        // let response = await fetch(\"http://localhost:8080/api/v1/medicines\");\n        let response = await fetch('http://localhost:8080/api/v1/medicines', {\n          headers: {\n            'Authorization': `Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJnbG9yeTEyIiwiaWF0IjoxNjYyOTkyNjk3LCJleHAiOjE2NjMwNzkwOTd9.hPweUDue9TQW3XiX-PGSdlkwJAt2EOWEXg3yj-vChQ4GVc66R5eqJqvc7KhJ1BcpAbb5pw2m8hxYNhMxqCO-zA`\n          }\n        });\n        let medicineNotificationInfo = await response.json(); //  let medicineNotificationInfo = [\n        //   {\n        //     id: 27,\n        //     medName: \"Paracetamol\",\n        //     isSyrup: \"No\",\n        //     morningTiming: \"07:00:00\",\n        //     morningDosage: \"1 Tablet\",\n        //     afternoonTiming: \"11:12:00\",\n        //     afternoonDosage: \"1 Tablet\",\n        //     eveningTiming: \"18:00:00\",\n        //     eveningDosage: \"1 Tablet\",\n        //     nightTiming: \"21:28:00\",\n        //     nightDosage: \"2 Tablet\",\n        //   },\n        // ]; \n\n        let allMedicineNotification = [];\n\n        for (let i = 0; i < medicineNotificationInfo.length; i++) {\n          const {\n            morningTiming,\n            afternoonTiming,\n            eveningTiming,\n            nightTiming\n          } = medicineNotificationInfo[i];\n          const medicineObj = {\n            morningTiming,\n            afternoonTiming,\n            eveningTiming,\n            nightTiming\n          };\n          Object.entries(medicineObj).forEach(_ref => {\n            let [key, value] = _ref;\n\n            if (value !== null) {\n              let hour = medicineObj[key].split(\":\")[0];\n              let minuite = medicineObj[key].split(\":\")[1];\n              let medicineName = medicineNotificationInfo[i].medName;\n              let dummyDate = new Date();\n              let userTimeToRemind = new Date(dummyDate.getFullYear(), dummyDate.getMonth(), dummyDate.getDate(), hour, minuite, 0);\n              let userOriginalTime = new Date(userTimeToRemind.valueOf());\n              userTimeToRemind.setHours(hour - 0);\n              userTimeToRemind.setMinutes(minuite - 30);\n              let currentTime = new Date();\n\n              if (Date.parse(currentTime) >= Date.parse(userTimeToRemind) && Date.parse(currentTime) <= Date.parse(userOriginalTime) && localStorage.getItem(`isNotificationPushed_${medicineName}_${hour}_${minuite}`) == null) {\n                console.log(\"Condition Visit........\" + medicineName);\n                localStorage.setItem(`isNotificationPushed_${medicineName}_${hour}_${minuite}`, \"true\");\n                let todaysDate = new Date();\n                localStorage.setItem(\"todays_date\", `${todaysDate.getFullYear()}-${todaysDate.getMonth() + 1}-${todaysDate.getDay()}`);\n                let dosage = key.replace(\"Timing\", \"Dosage\");\n                let when = key.replace(\"Timing\", \"\").toUpperCase();\n                let eligibleMedicineToNotify = {\n                  medicineName: medicineNotificationInfo[i].medName,\n                  medicineDosage: medicineNotificationInfo[i][dosage],\n                  medicineTime: value,\n                  when: when\n                };\n                allMedicineNotification.push(eligibleMedicineToNotify);\n              }\n            }\n          });\n        }\n\n        if (allMedicineNotification.length > 0) {\n          setMedicineData(medicineData => [...allMedicineNotification]);\n          setIsDialogOpen(true);\n        }\n      }\n\n      fetchMedicineNotification();\n      return () => clearInterval(interval);\n    }, 5000);\n  }, []);\n  useEffect(() => {\n    let todaysDate = new Date();\n    let todaysDateString = `${todaysDate.getFullYear()}-${todaysDate.getMonth() + 1}-${todaysDate.getDay()}`;\n\n    if (todaysDateString !== localStorage.getItem(\"todays_date\")) {\n      localStorage.clear();\n    }\n  }, []);\n\n  const closeBox = () => {\n    setIsDialogOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isDialogOpen && medicineData.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ReactDialogBox, {\n        closeBox: closeBox,\n        modalWidth: \"60%\",\n        headerBackgroundColor: \"red\",\n        headerTextColor: \"white\",\n        headerHeight: \"10\",\n        closeButtonColor: \"white\",\n        bodyBackgroundColor: \"white\",\n        bodyTextColor: \"black\",\n        bodyHeight: \"400px\",\n        headerText: \"Reminder\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Kindly take your Medicine as Follows:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center mb-3\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-center\",\n            children: \"Medicines List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              style: {\n                marginLeft: \"70px\"\n              },\n              className: \"table table-bordered table-warning\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"MEDICINE\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"WHEN\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"DOSAGES\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"TIMINGS\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: medicineData.map((medicine, index) => {\n                  return /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: medicine.medicineName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: medicine.when\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 178,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: medicine.medicineDosage\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 179,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: medicine.medicineTime\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 27\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 25\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n\n_s(Notification, \"BiVJQ/GotiZPJg9iGvFlq6z6HQg=\");\n\n_c = Notification;\nexport default _c2 = /*#__PURE__*/memo(Notification);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Notification\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/My PC/Desktop/Pillpopper_Integrated_Frontend-main/src/components/Notification.js"],"names":["React","useEffect","useState","memo","ReactDialogBox","Notification","isDialogOpen","setIsDialogOpen","medicineData","setMedicineData","interval","setInterval","console","log","fetchMedicineNotification","response","fetch","headers","medicineNotificationInfo","json","allMedicineNotification","i","length","morningTiming","afternoonTiming","eveningTiming","nightTiming","medicineObj","Object","entries","forEach","key","value","hour","split","minuite","medicineName","medName","dummyDate","Date","userTimeToRemind","getFullYear","getMonth","getDate","userOriginalTime","valueOf","setHours","setMinutes","currentTime","parse","localStorage","getItem","setItem","todaysDate","getDay","dosage","replace","when","toUpperCase","eligibleMedicineToNotify","medicineDosage","medicineTime","push","clearInterval","todaysDateString","clear","closeBox","marginLeft","map","medicine","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, memo } from \"react\";\r\n\r\nimport { ReactDialogBox } from \"react-js-dialog-box\";\r\nimport \"react-js-dialog-box/dist/index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst Notification = () => {\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [medicineData, setMedicineData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      console.log(\"INTERVAL CALLING\");\r\n      async function fetchMedicineNotification() {\r\n        // let response = await fetch(\"http://localhost:8080/api/v1/medicines\");\r\n        \r\n        let response = await fetch('http://localhost:8080/api/v1/medicines',\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJnbG9yeTEyIiwiaWF0IjoxNjYyOTkyNjk3LCJleHAiOjE2NjMwNzkwOTd9.hPweUDue9TQW3XiX-PGSdlkwJAt2EOWEXg3yj-vChQ4GVc66R5eqJqvc7KhJ1BcpAbb5pw2m8hxYNhMxqCO-zA`\r\n          },\r\n        })\r\n        let medicineNotificationInfo = await response.json();\r\n//  let medicineNotificationInfo = [\r\n//   {\r\n//     id: 27,\r\n//     medName: \"Paracetamol\",\r\n//     isSyrup: \"No\",\r\n//     morningTiming: \"07:00:00\",\r\n//     morningDosage: \"1 Tablet\",\r\n//     afternoonTiming: \"11:12:00\",\r\n//     afternoonDosage: \"1 Tablet\",\r\n//     eveningTiming: \"18:00:00\",\r\n//     eveningDosage: \"1 Tablet\",\r\n//     nightTiming: \"21:28:00\",\r\n//     nightDosage: \"2 Tablet\",\r\n//   },\r\n// ]; \r\n        let allMedicineNotification = [];\r\n        for (let i = 0; i < medicineNotificationInfo.length; i++) {\r\n          const { morningTiming, afternoonTiming, eveningTiming, nightTiming } =\r\n            medicineNotificationInfo[i];\r\n\r\n          const medicineObj = {\r\n            morningTiming,\r\n            afternoonTiming,\r\n            eveningTiming,\r\n            nightTiming,\r\n          };\r\n\r\n          Object.entries(medicineObj).forEach(([key, value]) => {\r\n            if (value !== null) {\r\n              let hour = medicineObj[key].split(\":\")[0];\r\n              let minuite = medicineObj[key].split(\":\")[1];\r\n\r\n              let medicineName = medicineNotificationInfo[i].medName;\r\n\r\n              let dummyDate = new Date();\r\n              let userTimeToRemind = new Date(\r\n                dummyDate.getFullYear(),\r\n                dummyDate.getMonth(),\r\n                dummyDate.getDate(),\r\n                hour,\r\n                minuite,\r\n                0\r\n              );\r\n\r\n              let userOriginalTime = new Date(userTimeToRemind.valueOf());\r\n\r\n              userTimeToRemind.setHours(hour - 0);\r\n              userTimeToRemind.setMinutes(minuite - 30);\r\n\r\n              let currentTime = new Date();\r\n\r\n              if (\r\n                Date.parse(currentTime) >= Date.parse(userTimeToRemind) &&\r\n                Date.parse(currentTime) <= Date.parse(userOriginalTime) &&\r\n                localStorage.getItem(\r\n                  `isNotificationPushed_${medicineName}_${hour}_${minuite}`\r\n                ) == null\r\n              ) {\r\n                console.log(\"Condition Visit........\" + medicineName);\r\n            \r\n                localStorage.setItem(\r\n                  `isNotificationPushed_${medicineName}_${hour}_${minuite}`,\r\n                  \"true\"\r\n                );\r\n\r\n                let todaysDate = new Date();\r\n                localStorage.setItem(\r\n                  \"todays_date\",\r\n                  `${todaysDate.getFullYear()}-${\r\n                    todaysDate.getMonth() + 1\r\n                  }-${todaysDate.getDay()}`\r\n                );\r\n\r\n                let dosage = key.replace(\"Timing\", \"Dosage\");\r\n                let when = key.replace(\"Timing\", \"\").toUpperCase();\r\n\r\n                let eligibleMedicineToNotify = {\r\n                  medicineName: medicineNotificationInfo[i].medName,\r\n                  medicineDosage: medicineNotificationInfo[i][dosage],\r\n                  medicineTime: value,\r\n                  when: when,\r\n                };\r\n\r\n                allMedicineNotification.push(eligibleMedicineToNotify);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        if (allMedicineNotification.length > 0) {\r\n          setMedicineData((medicineData) => [...allMedicineNotification]);\r\n          setIsDialogOpen(true);\r\n        }\r\n      }\r\n\r\n      fetchMedicineNotification();\r\n      return () => clearInterval(interval);\r\n    }, 5000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let todaysDate = new Date();\r\n    let todaysDateString = `${todaysDate.getFullYear()}-${\r\n      todaysDate.getMonth() + 1\r\n    }-${todaysDate.getDay()}`;\r\n\r\n    if (todaysDateString !== localStorage.getItem(\"todays_date\")) {\r\n      localStorage.clear();\r\n    }\r\n  }, []);\r\n\r\n  const closeBox = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isDialogOpen && medicineData.length > 0 && (\r\n        <>\r\n          <ReactDialogBox\r\n            \r\n            closeBox={closeBox}\r\n            modalWidth=\"60%\"\r\n            headerBackgroundColor=\"red\"\r\n            headerTextColor=\"white\"\r\n            headerHeight=\"10\"\r\n            closeButtonColor=\"white\"\r\n            bodyBackgroundColor=\"white\"\r\n            bodyTextColor=\"black\"\r\n            bodyHeight=\"400px\"\r\n            headerText=\"Reminder\"\r\n          >\r\n            <div className=\"text-center mb-4\">\r\n              <h3>Kindly take your Medicine as Follows:</h3>\r\n            </div>\r\n            <div className=\"text-center mb-3\">\r\n              <h4 className=\"text-center\">Medicines List</h4>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"text-center\">\r\n                <table style={{marginLeft:\"70px\"}} className=\"table table-bordered table-warning\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>MEDICINE</th>\r\n                      <th>WHEN</th>\r\n                      <th>DOSAGES</th>\r\n                      <th>TIMINGS</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {medicineData.map((medicine, index) => {\r\n                      return (\r\n                        <tr key={index}>\r\n                          <td>{medicine.medicineName}</td>\r\n                          <td>{medicine.when}</td>\r\n                          <td>{medicine.medicineDosage}</td>\r\n                          <td>{medicine.medicineTime}</td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </ReactDialogBox>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(Notification);\r\n"]},"metadata":{},"sourceType":"module"}